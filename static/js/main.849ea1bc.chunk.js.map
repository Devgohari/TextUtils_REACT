{"version":3,"sources":["components/Navbar.js","components/TextForm.js","components/About.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","propp","className","mode","href","title","type","id","to","link","onClick","togglemode","role","changeMode","htmlFor","defaultProps","TextForm","useState","Text","setText","heading","placeholder","rows","style","color","onChange","event","console","log","target","value","UPPER","toUpperCase","showAlert","toLowerCase","navigator","clipboard","writeText","split","length","About","backgroundColor","mystyle","setmystyle","btnText","setbtnText","border","App","setchangeMode","setAlert","message","msg","setTimeout","document","body","window","location","getElementById","exact","path","element","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.849ea1bc.chunk.js","sourcesContent":["import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nfunction Navbar(propp) {\r\n  return (\r\n    <nav\r\n      className={`navbar navbar-expand-lg navbar-${propp.mode} light bg-${propp.mode}`}\r\n    >\r\n      <div className=\"container-fluid\">\r\n        <a className=\"navbar-brand\" href=\"/\">\r\n          {propp.title}\r\n        </a>\r\n        <button\r\n          className=\"navbar-toggler\"\r\n          type=\"button\"\r\n          data-bs-toggle=\"collapse\"\r\n          data-bs-target=\"#navbarSupportedContent\"\r\n          aria-controls=\"navbarSupportedContent\"\r\n          aria-expanded=\"false\"\r\n          aria-label=\"Toggle navigation\"\r\n        >\r\n          <span className=\"navbar-toggler-icon\" />\r\n        </button>\r\n        <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n          <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n            <li className=\"nav-item\">\r\n              <Link className=\"nav-link active\" aria-current=\"page\" to=\"/\">\r\n                Home\r\n              </Link>\r\n            </li>\r\n            <li className=\"nav-item\">\r\n              <Link className=\"nav-link active\" aria-current=\"page\" to=\"/about\">\r\n                {propp.link}\r\n              </Link>\r\n            </li>\r\n          </ul>\r\n          <div\r\n            className={`form-check form-switch text-${propp.mode === \"light\" ? \"dark\" : \"light\"\r\n              }`}\r\n          >\r\n            {/* <div className={`form-check form-switch text-${propp.changeMode==='light'?'dark':\"light\"}`}> */}\r\n            <input\r\n              onClick={propp.togglemode}\r\n              className=\"form-check-input\"\r\n              type=\"checkbox\"\r\n              role=\"switch\"\r\n              id=\"flexSwitchCheckDefault\"\r\n            />\r\n            <label\r\n              className={`form-check-label text-${propp.changeMode === \"light\" ? \"dark\" : \"light\"\r\n                }}`}\r\n              htmlFor=\"flexSwitchCheckDefault\"\r\n            >\r\n              Enable {propp.mode === \"light\" ? 'Dark' : 'Light'} Mode\r\n            </label>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </nav>\r\n  );\r\n}\r\nNavbar.propTypes = { title: PropTypes.string, link: PropTypes.string };\r\nNavbar.defaultProps = {\r\n  title: \"Set text here\",\r\n  link: \"Set link here\",\r\n};\r\nexport default Navbar;\r\n","import React, { useState } from \"react\";\r\n\r\nfunction TextForm(propp) {\r\n  const [Text, setText] = useState(\"\");\r\n  const handleOnChange = (event) => {\r\n    console.log(\"This is handle on change\");\r\n    setText(event.target.value);\r\n    // this.result = event.target.value;\r\n  };\r\n  const upperCase = () => {\r\n    console.log(\"upperCase was clicked\");\r\n    let UPPER = Text.toUpperCase();\r\n    setText(UPPER);\r\n    propp.showAlert('Text-Converted to uppercase', 'success')\r\n  };\r\n  const lowerCase = () => {\r\n    console.log(\"upperCase was clicked\");\r\n    let UPPER = Text.toLowerCase();\r\n    setText(UPPER);\r\n    propp.showAlert('Text-Converted to lowercase', 'success')\r\n  };\r\n  const clipboard = ()=>{ \r\n    navigator.clipboard.writeText(Text);\r\n    propp.showAlert('Text-copied to clipboard', 'success')\r\n  };\r\n  const cleartext = ()=>{ \r\n    setText('')\r\n    propp.showAlert('Text-cleared', 'success')\r\n  };\r\n  return (\r\n      <>\r\n    <div className=\"container \">\r\n      <div className=\"mb-3 my-3\">\r\n        <h3>{propp.heading}</h3>\r\n\r\n        <textarea\r\n          placeholder='Enter Your Text Here'\r\n          className=\"form-control\"\r\n          rows={4}\r\n          style={{color:propp.changeMode==='dark'?\"white\":\"black\"}}\r\n          onChange={handleOnChange}\r\n          value={Text}\r\n          id='textarea'\r\n        />\r\n      </div>\r\n      <button type=\"button\" className={`mx-2 btn btn-${propp.mode==='light'?'dark':'light'}`} onClick={upperCase}>\r\n        Convert To Upper Case\r\n      </button>\r\n      <button type=\"button\" className={`mx-2 btn btn-${propp.mode==='light'?'dark':'light'}`} onClick={lowerCase}>\r\n        Convert To Lower Case\r\n      </button>\r\n      <button type=\"button\" className={`mx-2 btn btn-${propp.mode==='light'?'dark':'light'}`} onClick={clipboard}>\r\n        Copy To Clip-Board\r\n      </button>\r\n      <button type=\"button\" className={`mx-2 btn btn-${propp.mode==='light'?'dark':'light'}`} onClick={cleartext}>\r\n        ClearText\r\n      </button>\r\n    </div>\r\n    <div className='container my-3'>\r\n        <h1>Your Text Summary</h1>\r\n        <p>{Text.split(' ').length} and {Text.length} characters</p>\r\n        <p>You will need {(Text.split(' ').length)*0.08} </p>\r\n        <h2>Preview</h2>\r\n        <p>{Text>0?Text:'Enter Some Text to Preview'}</p>\r\n    </div>\r\n    </>\r\n  );\r\n}\r\nexport default TextForm;\r\n","import React, { useState } from \"react\";\r\n\r\nfunction About() {\r\n  const [mystyle, setmystyle] = useState({\r\n    color: \"black\",\r\n    backgroundColor: \"white\",\r\n  });\r\n  const [btnText, setbtnText] = useState(\"Enable Dark Mode\")\r\n  const toggleMode = () => {\r\n      if (mystyle.color==='black') {\r\n        setbtnText('Enable Light Mode')\r\n          setmystyle({\r\n            color: \"red\",\r\n            backgroundColor: \"black\",\r\n            border:'1px solid white'\r\n          }) \r\n    }\r\n    else{\r\n        setbtnText('Enable Dark Mode')\r\n        setmystyle({\r\n            color: \"black\",\r\n            backgroundColor: \"white\",\r\n          }) \r\n    }\r\n  };\r\n  return (\r\n    <div className=\"container\" style={mystyle}>\r\n      <div className=\"accordion\" id=\"accordionExample\">\r\n        <div className=\"accordion-item\">\r\n          <h2 className=\"accordion-header\" id=\"headingOne\">\r\n            <button\r\n              style={mystyle}\r\n              className=\"accordion-button\"\r\n              type=\"button\"\r\n              data-bs-toggle=\"collapse\"\r\n              data-bs-target=\"#collapseOne\"\r\n              aria-expanded=\"true\"\r\n              aria-controls=\"collapseOne\"\r\n            >\r\n              Accordion Item #1\r\n            </button>\r\n          </h2>\r\n          <div\r\n            id=\"collapseOne\"\r\n            className=\"accordion-collapse collapse show\"\r\n            aria-labelledby=\"headingOne\"\r\n            data-bs-parent=\"#accordionExample\"\r\n          >\r\n            <div className=\"accordion-body\">\r\n              <strong>This is the first item's accordion body.</strong> It is\r\n              shown by default, until the collapse plugin adds the appropriate\r\n              classes that we use to style each element. These classes control\r\n              the overall appearance, as well as the showing and hiding via CSS\r\n              transitions. You can modify any of this with custom CSS or\r\n              overriding our default variables. It's also worth noting that just\r\n              about any HTML can go within the <code>.accordion-body</code>,\r\n              though the transition does limit overflow.\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"accordion-item\">\r\n          <h2 className=\"accordion-header\" id=\"headingTwo\">\r\n            <button\r\n              style={mystyle}\r\n              className=\"accordion-button collapsed\"\r\n              type=\"button\"\r\n              data-bs-toggle=\"collapse\"\r\n              data-bs-target=\"#collapseTwo\"\r\n              aria-expanded=\"false\"\r\n              aria-controls=\"collapseTwo\"\r\n            >\r\n              Accordion Item #2\r\n            </button>\r\n          </h2>\r\n          <div\r\n            id=\"collapseTwo\"\r\n            className=\"accordion-collapse collapse\"\r\n            aria-labelledby=\"headingTwo\"\r\n            data-bs-parent=\"#accordionExample\"\r\n          >\r\n            <div className=\"accordion-body\">\r\n              <strong>This is the second item's accordion body.</strong> It is\r\n              hidden by default, until the collapse plugin adds the appropriate\r\n              classes that we use to style each element. These classes control\r\n              the overall appearance, as well as the showing and hiding via CSS\r\n              transitions. You can modify any of this with custom CSS or\r\n              overriding our default variables. It's also worth noting that just\r\n              about any HTML can go within the <code>.accordion-body</code>,\r\n              though the transition does limit overflow.\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"accordion-item\">\r\n          <h2 className=\"accordion-header\" id=\"headingThree\">\r\n            <button\r\n              style={mystyle}\r\n              className=\"accordion-button collapsed\"\r\n              type=\"button\"\r\n              data-bs-toggle=\"collapse\"\r\n              data-bs-target=\"#collapseThree\"\r\n              aria-expanded=\"false\"\r\n              aria-controls=\"collapseThree\"\r\n            >\r\n              Accordion Item #3\r\n            </button>\r\n          </h2>\r\n          <div\r\n            id=\"collapseThree\"\r\n            className=\"accordion-collapse collapse\"\r\n            aria-labelledby=\"headingThree\"\r\n            data-bs-parent=\"#accordionExample\"\r\n          >\r\n            <div className=\"accordion-body\">\r\n              <strong>This is the third item's accordion body.</strong> It is\r\n              hidden by default, until the collapse plugin adds the appropriate\r\n              classes that we use to style each element. These classes control\r\n              the overall appearance, as well as the showing and hiding via CSS\r\n              transitions. You can modify any of this with custom CSS or\r\n              overriding our default variables. It's also worth noting that just\r\n              about any HTML can go within the <code>.accordion-body</code>,\r\n              though the transition does limit overflow.\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <button type=\"button\" onClick={toggleMode} className=\"btn btn-light my-2\">\r\n      {btnText}\r\n      </button>\r\n    </div>\r\n  );\r\n}\r\nexport default About;\r\n","import \"./App.css\";\nimport React, { useState } from \"react\";\nimport Navbar from \"./components/Navbar\";\nimport TextForm from \"./components/TextForm\";\nimport About from \"./components/About\";\n// import Alertpage from \"./components/Alertpage\";\nimport {\n  BrowserRouter,\n  Routes,\n  Route,\n  // Link,\n  // Outlet\n} from \"react-router-dom\";\nfunction App() {\n\n\n\n  const [changeMode, setchangeMode] = useState(\"light\");\n  const [Alert, setAlert] = useState(null)\n  const showAlert = (message, type) => {\n    setAlert({\n      msg: message,\n      type: type\n    })\n    setTimeout(() => {\n      setAlert(null)\n    }, 1500);\n  }\n\n  const togglemode = () => {\n    if (changeMode === \"light\") {\n      setchangeMode(\"dark\");\n      showAlert('Dark mode has been abled', 'success')\n      document.body.style.backgroundColor = \"#001131\";\n      document.body.style.color = \"white\";\n      if (window.location.href===\"http://localhost:3000/\") {\n        document.getElementById(\"textarea\").style.backgroundColor = \"#001131\";\n        document.getElementById(\"textarea\").style.color = \"white\";\n      }\n    } else {\n      setchangeMode(\"light\");\n      showAlert('Light mode has been abled', 'success')\n      document.body.style.backgroundColor = \"white\";\n      document.body.style.color = \"black\";\n      if (window.location.href===\"http://localhost:3000/\") {\n        document.getElementById(\"textarea\").style.color = \"black\";\n        document.getElementById(\"textarea\").style.backgroundColor = \"white\";\n      }\n    }\n\n  };\n  return (\n\n\n    <BrowserRouter>\n    <Navbar title=\"TEXT-UTILS\" link=\"About\" mode={changeMode} togglemode={togglemode} />\n      <Routes>\n        <Route exact path='/' element={<TextForm showAlert={showAlert} heading=\"Enter the text to analyze below\" mode={changeMode}/>}/>\n        <Route exact path='about' element={<About/>} />\n      </Routes>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n      <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}